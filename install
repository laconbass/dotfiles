#!/usr/bin/env bash

# http://julipedia.meroh.net/2010/01/set-e-and-set-x.html
set -e


# Personal output functions

#COLS=$(( $(tput cols) - 4 ))
info () {
  printf "\033[00;34m${1}\033[0m\n"
}
warn () {
  printf "\033[0;33m${1}\033[0m\n"
}
doing () {
  printf "\033[00;34m* ${1}...\033[0m\n"
}
success () {
  #printf "\033[1C\033[${COLS}C\t\t\033[0;32mOK${1}\033[0m\n"
  printf "\033[00;34m| - - - - - - - - - - - - - - - - -> \033[0;32mOK\033[0m\n"
  #printf "\t\t\t\t     \033[0;32mOK\n${1}\033[0m\n"
}
fail () {
  printf "\033[00;34m| - - - - - - - - - - - - - - - -> \033[0;31mFAIL\033[0m\n" && exit 1
  # printf "\t\t\t\t   \033[0;31mFAIL\n${1}\033[0m\n" && exit 1
}

# checks whatever a system util is present
ensure_present () {
  doing "Ensuring package '$1' is present"\
  && dpkg -s $1 > /dev/null 2>&1 && success\
  || (\
    warn "package '$1' not present."\
    && doing "Installing with apt-get"\
    && sudo apt-get install $1\
    || fail "Instalation of '$1' failed :S"\
  )
}


info ""
info "***************************************"
info "* @laconbass' dotfiles install script *"
info "***************************************"
info ""
info "***************************************"
info "***           preparation           ***"
info "**                                   **"

CURRENT=$(pwd)
DOTFILES=$(pwd)/$(dirname $0)
cd $DOTFILES
DOTFILES=$(pwd)

doing "updating repository and git modules"\
 && git pull\
 && git submodule init\
 && git submodule update\
 && success\
 || fail ":S"

info "***************************************"
info "***           xterm utils           ***"
info "**                                   **"

doing "setting .bashrc file"\
 && rm ~/.bashrc\
 && ln -s "$DOTFILES/term/.bashrc"\
          ~/.bashrc\
 && success\
 || fail "sorry, aborting"

doing "setting git-prompt file"\
 && rm ~/git-prompt\
 && ln -s "$DOTFILES/term/git-prompt"\
          ~/git-prompt\
 && success\
 || fail

ensure_present "bash-completion"

# this seems not necessary as it will not afect the parent shell...
#doing "loading .bashrc confs"\
# && source ~/.bashrc\
# && success\
# || fail

doing "setting soralized palette for ls output"\
 && eval `dircolors "$DOTFILES/term/1-dircolors-solarized/dircolors.ansi-dark"`\
 && success\
 || fail "something went wrong"

doing "installing gnome-terminal-colors-solarized"\
 && cd $DOTFILES/term/2-gnome-terminal-solarized\
 && ./set_dark.sh\
 && cd $DOTFILES\
 && success\
 || fail


info "***************************************"
info "***              ruby               ***"
info "**                                   **"

ensure_present "ruby"
ensure_present "ruby-dev"

#doing "Ensuring rvm is installed"\
# && rvm -v\
# && success\
#|| (\
#  doing "rvm is not present, installing its dependencies"\
#  && sudo apt-get install build-essential openssl\
#                          libreadline6 libreadline6-dev\
#                          curl git-core zlib1g zlib1g-dev\
#                          libssl-dev libyaml-dev libsqlite3-dev\
#                          sqlite3 libxml2-dev libxslt-dev\
#                          autoconf libc6-dev ncurses-dev\
#                          automake libtool bison subversion\
#  && success\
#  && doing "installing rvm"\
#  && curl -L https://get.rvm.io | bash -s stable --ruby\
#  && success\
#  || fail\
#)


info "***************************************"
info "***               vim               ***"
info "**                                   **"

# vim must have ruby support for Command-T plugin
# big thanks to jwieringa for sharing his knowledge
# https://gist.github.com/jwieringa/1348303
# big thanks to justinbar for sharings his knowledge
# http://www.justinbar.net/post/install-vim-with-ruby-support-and-command-t-plugin-on-ubuntu

doing "ensuring vim has ruby support"\
 && vim --version | grep -o +ruby\
 && success\
 || (\
  doing "No ruby support, purge vim and reinstall"\
    && sudo apt-get purge vim\
    && info "successfully purged"\
    && doing "compiling vim with ruby support"\
    && cd "$DOTFILES/vim/vim-repo"\
    && ./configure --with-features=huge --enable-rubyinterp\
    && make\
    && sudo make install\
    && cd "$DOTFILES"\
    && success\
    || fail\
 )

#doing "ensure rvm is loaded as a shell function"\
# && source ~/.rvm/scripts/rvm\
# && type rvm | head -1\
# && success\
# || fail

doing "identify ruby version of vim"
VIM_RUBY=$(vim --version | sed -n 's/.*\(ruby-[0-9]\.[0-9]\.[0-9]\).*/\1/p')
info "Vim's ruby version is $VIM_RUBY"

#doing "set ruby version to the corresponding one"\
# && rvm use $VIM_RUBY\
# && success\
# || (\
#   doing "installing $VIM_RUBY"\
#   && rvm install $VIM_RUBY\
#   && rvm use $VIM_RUBY\
#   && success\
#   || fail
# )

doing "compiling command-t"\
 && cd "$DOTFILES/vim/7-command-t/ruby/command-t"\
 && ruby extconf.rb\
 && make\
 && cd $DOTFILES\
 && success\
 || fail

doing "setting .vimrc file"\
 && rm ~/.vimrc\
 && ln -s "$DOTFILES/vim/.vimrc"\
          ~/.vimrc\
 && success\
 || fail "sorry, aborting"

doing "deleting ~/.vim directory"\
 && rm -r ~/.vim\
 && success\
 || fail

doing "installing pathogen"\
 && mkdir -p ~/.vim/autoload\
 && ln -s "$DOTFILES/vim/1-pathogen/autoload/pathogen.vim"\
          ~/.vim/autoload/pathogen.vim\
 && mkdir -p ~/.vim/bundle\
 && success\
 || fail ":S"

doing "installing command-t"\
 && ln -s "$DOTFILES/vim/7-command-t"\
          ~/.vim/bundle/command-t\
 && success\
 || fail ":S"

doing "installing Node.vim"\
 && ln -s "$DOTFILES/vim/2-vim-node"\
          ~/.vim/bundle/node\
 && success\
 || fail ":S"

doing "installing solarized"\
 && ln -s "$DOTFILES/vim/3-solarized"\
          ~/.vim/bundle/solarized\
 && success\
 || fail ":S"


doing "installing nodejs-complete"\
 && ln -s "$DOTFILES/vim/4-nodejs-complete"\
          ~/.vim/nodejs-complete\
 && success\
 || fail ":S"

 #&& sudo npm install -g jshint\
 #&& cp "$DOTFILES/vim/5-jshint/plugin/jshint.vim"\
 #         ~/.vim/bundle/jshint.vim\
doing "installing jshint.vim"\
 && warn "this actually does not work"\
 && success\
 || fail ":S"

 #&& ln -s "$DOTFILES/vim/5-jslint/ftplugin"\
 #         ~/.vim/ftplugin\
doing "installing jslint.vim"\
 && warn "this actually does not work"\
 && success\
 || fail ":S"



info "***************************************"
info "***            finish up            ***"
info "**                                   **"

cd $CURRENT

info "The installation process completed"
info "You may want to close this shell and open a new one"
info "Or manually execute:"
info "    source ~/.bashrc"
info ""
