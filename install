#!/usr/bin/env bash

# http://julipedia.meroh.net/2010/01/set-e-and-set-x.html
set -e


# Personal output functions

#COLS=$(( $(tput cols) - 4 ))
info () {
  printf "\033[00;34m${1}\033[0m\n"
}
warn () {
  printf "\033[0;33m${1}\033[0m\n"
}
doing () {
  printf "\033[00;34m> ${1}...\033[0m\n"
}
success () {
  [ $# -eq 1 ]\
    && printf "\033[0;32m${1}\033[0m\n"\
    || printf "\033[00;34m- \033[0;32mOK\033[0m\n"
}
fail () {
  [ $# -eq 1 ]\
    && printf "\033[0;31m${1}\033[0m\n"\
    || printf "\033[00;34m- \033[0;31mFAIL\033[0m\n"
  exit 1
}

ok () {
  return 0
}

# asks user for confirmation
# taken from http://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
confirm () {
  read -p "$(warn "$1") (y|Y): " -n 1
  echo ""
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    return 0
  else
    return 1
  fi
}

# checks whatever a system util is present
is_present () {
  dpkg -s $1 > /dev/null 2>&1
}

# ensure a package is present, try to install it if not
# fails and exits(1) if it's not successfully installed
ensure_present () {
  doing "Ensuring package '$1' is present"\
  && dpkg -s $1 > /dev/null 2>&1\
  && success\
  || (\
    warn "package '$1' is not present."\
    && confirm "do you want to install it?"\
    && (\
      doing "Installing with apt-get"\
      && sudo apt-get install $1\
      && success\
      || fail "Instalation of '$1' failed :S"\
    )\
    || fail "Can't continue without installing '$1'"\
  )
}


info ""
info "***************************************"
info "* @laconbass' dotfiles install script *"
info "***************************************"
info ""

info "***************************************"
info "***               git               ***"
info "**                                   **"

ensure_present "git"

doing "Checking if git should be configured"\
  && git config --global --list 2>/dev/null\
  && success "git is already configured for this user"\
  || (\
    warn "no global config reported for this user"\
    doing "setting up git global config"\
    && git config --global user.name "Lorenzo GarcÃ­a Rivera"\
    && git config --global user.email lorenzogrv@gmail.com\
    && git config --global core.editor vim\
    && git config --global --list\
    && success "git config was set, see above for details"\
    fail "something went wrong :S"\
  )


info "***************************************"
info "***         getting source          ***"
info "**                                   **"

DOTFILES=~/.dotfiles

# Check whatever dotfiles repo should be cloned or updated
# ensure the directory does not exist before appling update strategy
doing "selecting a install strategy (update vs fresh-install)"\
  && info "target directory is $DOTFILES"

if [ ! -d "$DOTFILES" ]
then
  success "dotfiles is being fresh-installed"\
    && doing "going to clone dotfiles repository"\
    && confirm "press 'Y' to proceed" || fail "stopped by user"\
    && git clone --recurse-submodules -- https://github.com/laconbass/dotfiles.git $DOTFILES\
    && success "successfully cloned source repository"\
    || fail "couldn't clone the respository, see logs above"
else
  success "dotfiles is being updated"\
    && doing "updating repository and git modules"\
    && confirm "press 'Y' to proceed" || fail "stopped by user"\
    && git pull\
    && git submodule init\
    && git submodule foreach --recursive git reset --hard && git clean -f -d\
    && git submodule update\
    && success "succesfully updated source respository"\
    || fail ":S couldn't update the repository"
fi

# info "***************************************"
# info "***              ruby               ***"
# info "**                                   **"

# ensure_present "ruby"
# ensure_present "ruby-dev"

#doing "Ensuring rvm is installed"\
# && rvm -v\
# && success\
# || (\
#   doing "rvm is not present, installing its dependencies"\
#   && sudo apt-get install build-essential openssl\
#                           libreadline6 libreadline6-dev\
#                           curl git-core zlib1g zlib1g-dev\
#                           libssl-dev libyaml-dev libsqlite3-dev\
#                           sqlite3 libxml2-dev libxslt-dev\
#                           autoconf libc6-dev ncurses-dev\
#                           automake libtool bison subversion\
#   && success\
#   && doing "installing rvm"\
#   && curl -L https://get.rvm.io | bash -s stable --ruby=\
#   && success\
#   || fail\
# )


info "***************************************"
info "***               vim               ***"
info "**                                   **"

# vim must have ruby support for Command-T plugin
# big thanks to jwieringa for sharing his knowledge
# https://gist.github.com/jwieringa/1348303
# big thanks to justinbar for sharings his knowledge
# http://www.justinbar.net/post/install-vim-with-ruby-support-and-command-t-plugin-on-ubuntu
# big thanks to the askubuntu community
# http://askubuntu.com/questions/281886/what-is-the-difference-between-the-different-vim-packages-available-in-ubuntu

ensure_present "vim-nox"

doing "ensuring vim has ruby support (for Command-T plugin)"\
  && vim --version | grep -o +ruby\
  && success\
  || fail "no ruby support"

#doing "ensure rvm is loaded as a shell function"\
#  && source ~/.rvm/scripts/rvm\
#  && type rvm | head -1\
#  && success\
#  || fail

doing "identify ruby version of vim"
VIM_RUBY=$(vim --version | sed -n 's/.*ruby-\([0-9]\.[0-9]\.[0-9]\).*/\1/p')
warn "Vim's ruby version is $VIM_RUBY"

#doing "set ruby version to the corresponding one"\
# && rvm use $VIM_RUBY\
# && success\
# || (\
#   doing "installing $VIM_RUBY"\
#   && rvm install $VIM_RUBY\
#   && rvm use $VIM_RUBY\
#   && success\
#   || fail
# )

doing "preparing to comiple command-t"\
 && cd "$DOTFILES/vim/7-command-t/ruby/command-t"\
 && ensure_present "ruby-dev"\
 && success "ready to compile command-t with ruby$VIM_RUBY"\
 && doing "compiling command-t"\
 && "ruby$VIM_RUBY" extconf.rb\
 && make\
 && cd $DOTFILES\
 && success "command-t compiled! :D"\
 || fail

VIMRC=~/.vimrc
[[ -e $VIMRC ]]\
  && doing "removing the file $VIMRC"\
  && rm $VIMRC\
  && success\
  || warn "no .vimrc file found, not a problem on fresh installs"

doing "setting .vimrc file"\
 && ln -s "$DOTFILES/vim/.vimrc"\
          ~/.vimrc\
 && success\
 || fail "sorry, aborting"

VIMUSR=~/.vim
[[ -d $VIMUSR ]]\
  && doing "deleting the directory $VIMUSR"\
  && rm -r $VIMUSR\
  && success\
  || warn "no .vim directory found, not a problem on fresh installs"

VIMBUNDLE="${VIMUSR}/bundle"
VIMAUTOLOAD="${VIMUSR}/autoload"
doing "installing pathogen"\
 && mkdir -p $VIMAUTOLOAD\
 && ln -s "$DOTFILES/vim/1-pathogen/autoload/pathogen.vim"\
          $VIMAUTOLOAD/pathogen.vim\
 && mkdir -p $VIMBUNDLE\
 && success\
 || fail ":S"

doing "installing command-t"\
 && ln -s "$DOTFILES/vim/7-command-t"\
          $VIMBUNDLE/command-t\
 && success\
 || fail ":S"

# commented out as it installs unnecessary things
#doing "installing vim-instant-markdown"\
#  && warn "asumming ruby --version >= 1.9.2"\
#  && info "if using ruby 1.8, you may need"\
#  && info "   [sudo] apt-get install rubygems"\
#  && info "if something fails, you will need to"\
#  && info "   [sudo] gem install redcarpet"\
#  && confirm "Press Y to continue (this will install some gems too)"\
#  && sudo gem install pygments.rb\
#  && sudo gem install redcarpet -v 2.3.0\
#  && sudo npm install -g instant-markdown-d\
#  && ensure_present "xdg-utils"\
#  && ln -s "$DOTFILES/vim/8-instant-markdown"\
#           $VIMBUNDLE/instant-markdown\
#  && success

doing "installing Node.vim"\
 && ln -s "$DOTFILES/vim/2-vim-node"\
          $VIMBUNDLE/node\
 && success\
 || fail ":S"

doing "installing solarized"\
 && ln -s "$DOTFILES/vim/3-solarized"\
          $VIMBUNDLE/solarized\
 && success\
 || fail ":S"


doing "installing nodejs-complete"\
 && ln -s "$DOTFILES/vim/4-nodejs-complete"\
          $VIMUSR/nodejs-complete\
 && success\
 || fail ":S"

doing "installing vim-less"\
 && ln -s "$DOTFILES/vim/9-vim-less"\
          $VIMBUNDLE/vim-less\
 && success\
 || fail ":S"

 #&& sudo npm install -g jshint\
 #&& cp "$DOTFILES/vim/5-jshint/plugin/jshint.vim"\
 #         $VIMBUNDLE/jshint.vim\
doing "installing jshint.vim"\
 && warn "this actually does not work"\
 && success\
 || fail ":S"

 #&& ln -s "$DOTFILES/vim/5-jslint/ftplugin"\
 #         $VIMUSR/ftplugin\
doing "installing jslint.vim"\
 && warn "this actually does not work"\
 && success\
 || fail ":S"

info "***************************************"
info "***          custom scripts         ***"
info "**                                   **"


USRBIN=~/bin
mkdir -p $USRBIN

doing "setting git-prompt script"\
 && ( ls $USRBIN/git-prompt > /dev/null 2>&1 && rm $USRBIN/git-prompt || ok )\
 && ln -s "$DOTFILES/term/git-prompt"\
          $USRBIN/git-prompt\
 && success\
 || fail

doing "setting nginx_modsite script"\
 && ( ls $USRBIN/nginx_modsite > /dev/null 2>&1 && rm $USRBIN/nginx_modsite || ok )\
 && ln -s "$DOTFILES/term/nginx_modsite"\
          $USRBIN/nginx_modsite\
 && success\
 || fail

info "***************************************"
info "***          xterm utils            ***"
info "**                                   **"

ensure_present "bash-completion"

doing "installing gnome-terminal-colors-solarized"\
 && cd $DOTFILES/term/2-gnome-terminal-solarized\
 && ./set_dark.sh\
 && cd $DOTFILES\
 && success\
 || fail

doing "setting .bashrc file"\
 && ( ls ~/.bashrc > /dev/null 2>&1 && rm ~/.bashrc || ok )\
 && ln -s "$DOTFILES/term/.bashrc"\
          ~/.bashrc\
 && success\
 || fail "sorry, aborting"


info "***************************************"
info "***            finish up            ***"
info "**                                   **"

cd

info "The installation process completed"
info "You may want to close this shell and open a new one"
info "Or manually execute:"
info "    source ~/.bashrc"
info ""
